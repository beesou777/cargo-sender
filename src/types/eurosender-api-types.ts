/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface CargoSenderUser {
  uid: string;
  name: string;
  email: string;
  picture?: string;
  isAdmin: boolean;
}

export interface paths {
  "/v1/countries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves the collection of countries
     * @description Retrieves the collection of countries
     */
    get: operations["api_v1countries_get_collection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/countries/{countryCode}/cities": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List of cities for country
     * @description For some countries (like Ireland or Romania), it is mandatory to provide exact city name or ID for placing an order.
     *                         This condition depends on country, flag for this is available at endpoint `/v1/countries`.
     *                         Response contains also associated regionId from `/v1/countries/{countryCode}/regions` endpoint.
     *
     */
    get: operations["api_v1countries_countryCodecities_get_collection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/countries/{countryCode}/regions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List of regions for country
     * @description For some countries (like Ireland, Romania, Italy, USA, Canada),
     *                                     it is mandatory to provide region (id, name or code) for placing an order.
     *                         This condition depends on country, flag for this is available at endpoint `/v1/countries`.
     *
     */
    get: operations["api_v1countries_countryCoderegions_get_collection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Creates new order
     * @description Creates new order
     */
    post: operations["api_v1orders_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders/validate_creation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Validates create new order request
     * @description Validates create new order request
     */
    post: operations["api_v1ordersvalidate_creation_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders/{orderCode}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves details about existing order
     * @description Retrieves details about existing order
     */
    get: operations["api_v1orders_orderCode_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders/{orderCode}/documents/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves order related document (Invoice, Labels, ...)
     * @description Retrieves order related document (Invoice, Labels, ...). For documents in PDF format use "application/pdf" Accept header, for documents in ZPL (Zebra) use "x-application/zpl Accept header
     */
    get: operations["api_v1orders_orderCodedocuments_id_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders/{orderCode}/labels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves labels document
     * @description Retrieves labels document. For labels in PDF format use "application/pdf" Accept header, for labels in ZPL (Zebra) use "x-application/zpl Accept header.
     */
    get: operations["api_v1orders_orderCodelabels_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orders/{orderCode}/tracking": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves details about delivery status of an order
     * @description Retrieves details about delivery status of an order. Please revert to us to enable the endpoint for you.
     */
    get: operations["api_v1orders_orderCodetracking_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/proforma": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Creates Proforma invoice for order
     * @description Creates Proforma invoice for order
     */
    post: operations["api_v1proforma_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/proforma/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Uploads file for Proforma invoice generation
     * @description Uploads file for Proforma invoice generation
     */
    post: operations["api_v1proformaupload_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/quotes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Gets quote and options for shipment
     * @description Gets quote and options for shipment
     */
    post: operations["api_v1quotes_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AddOnResponse: {
      code?: string;
      price?: components["schemas"]["PriceResponse"];
    };
    "CityRequest.CityResponse": {
      /**
       * @description cityId to be used in other endpoints
       * @example 1341
       */
      id?: number;
      /** @example Dublin */
      name?: string;
      /**
       * @description Region from `/v1/countries/{countryCode}/regions` endpoint, to match city to proper region
       * @example 6
       */
      regionId?: number;
    };
    CountryCustomFieldsResponse: {
      supportedServiceTypeIds?: number[];
      customFields?: components["schemas"]["CustomFieldResponse"][];
    };
    CountryResponse: {
      /** @example 123 */
      id?: number;
      /** @example LU */
      code?: string;
      /** @example Luxembourg */
      name?: string;
      /** @example false */
      requiresRegion?: boolean;
      /** @example false */
      requiresCity?: boolean;
      /** @example true */
      active?: boolean;
      /**
       * @description Flag if country is a member of European Union
       * @example true
       */
      isEu?: unknown;
      countryCustomFields?: components["schemas"]["CountryCustomFieldsResponse"];
    };
    CouponResponse: {
      couponCode?: string;
      discount?: components["schemas"]["PriceResponse"] | null;
    };
    CustomFieldResponse: {
      name?: string;
      type?: string;
      /** @example null */
      length?: number | null;
      required?: boolean;
      options?: string[];
      label?: string;
      additionalInfo?: string;
      /** @example null */
      placeholder?: string | null;
    };
    EnvelopeResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      weight?: number | null;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
    };
    InsuranceResponse: {
      id?: number;
      coverage?: number;
      text?: string;
      price?: components["schemas"]["PriceResponse"];
    };
    NonStandardResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      weight?: number | null;
      /** @example null */
      length?: number | null;
      /** @example null */
      width?: number | null;
      /** @example null */
      height?: number | null;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
    };
    OptionalServiceResponse: {
      id?: number;
      name?: string;
      price?: components["schemas"]["PriceResponse"];
    };
    OrderContactRequest: {
      /**
       * Format: email
       * @description Email address for transactional emails like order status changes,... If not provided, email
       *     address from User profile is used.
       * @example null
       */
      email?: string | null;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      name: unknown;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      phone: unknown;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      contactMethod: unknown;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      contactCustomerType: unknown;
    };
    OrderCourierResponse: {
      id?: number;
      shortName?: string;
      /** @example null */
      countryCode?: string | null;
      /** @example null */
      email?: string | null;
      /** @example null */
      phone?: string | null;
    };
    OrderDocumentResponse: {
      id?: string;
      type?: string;
      fileFormat?: string;
    };
    OrderInsuranceResponse: {
      id?: number;
      text?: string;
      price?: components["schemas"]["PriceResponse"];
    };
    OrderRegionResponse: {
      id?: number;
      name?: string;
    };
    OrderRequest: {
      shipment: components["schemas"]["ShipmentRequest"];
      parcels: components["schemas"]["ParcelsRequest"];
      /**
       * @description Service type to use. [More on service types](#section/Service-types)
       * @example regular_plus
       * @enum {unknown}
       */
      serviceType:
      | "selection"
      | "flexi"
      | "regular_plus"
      | "express"
      | "freight";
      /**
       * @description For internal use only.
       * @default null
       */
      courierTag: unknown;
      /**
       * @description Explicit courier to use, for internal use only.
       * @default null
       */
      courierId: unknown;
      /**
       * @description Payment method, where `credit` is for User credits (pre-paid, Wallet) and `deferred`
       *     must be additionally approved to be enabled for use. Other payment methods are not
       *     supported. [More info on user credits](https://www.eurosender.com/en/usp/wallet). [More info on deferred
       *     payment](https://www.eurosender.com/en/usp/deferred-payment).
       * @example credit
       * @enum {string}
       */
      paymentMethod: "credit" | "deferred";
      /**
       * @description Only `EUR` supported.
       * @example EUR
       * @enum {unknown}
       */
      currencyCode: "EUR";
      /**
       * @description Optional additional insurance ID, one of the values provided in Quotes responses under
       *     `options.serviceTypes.insurances`.
       * @example null
       */
      insuranceId?: number | null;
      orderContact: components["schemas"]["OrderContactRequest"];
      /** @example null */
      comment?: string | null;
      /**
       * @description Format in which labels will be created. Defaults to `pdf`.
       *     `zpl` format is not available for all couriers.
       * @default pdf
       * @example pdf
       * @enum {unknown}
       */
      labelFormat: "pdf" | "zpl";
    };
    "OrderRequest.OrderResponse": {
      orderCode?: string;
      /** @description Values: Pending, Order Received, Deferred Payment, Confirmed, Tracking, Canceled, Label Error, Awaiting Payment, Awaiting customs documentation, Awaiting additional payment */
      status?: unknown;
      serviceType?: string;
      language?: string;
      email?: string;
      paymentMethod?: string;
      currencyCode?: string;
      vatRate?: string;
      parcels?: components["schemas"]["ParcelsResponse"];
      courier?: components["schemas"]["OrderCourierResponse"];
      shipment?: components["schemas"]["ShipmentResponse"];
      estimatedDeliveryTime?: string;
      price?: components["schemas"]["PriceResponse"];
      discount?: components["schemas"]["PaymentDiscountResponse"] | null;
      coupon?: components["schemas"]["CouponResponse"] | null;
      insurance?: components["schemas"]["OrderInsuranceResponse"] | null;
      isCallRequired?: boolean;
      isLabelRequired?: boolean;
      /** @example null */
      labelLink?: string | null;
      labelFormat?: string;
      /** @example null */
      comment?: string | null;
      documents?: components["schemas"]["OrderDocumentResponse"][];
      /** Format: date-time */
      created?: string;
    };
    PackageRequest: {
      /**
       * @description Any value, currently not used, but if multiple parcels are in same request, each must use different value.
       * @example A00001
       */
      parcelId: unknown;
      /**
       * @default 1
       * @example 1
       */
      quantity: number;
      /**
       * @description Width in centimeters.
       * @example 14
       */
      width?: unknown;
      /**
       * @description Height in centimeters.
       * @example 14
       */
      height?: unknown;
      /**
       * @description Length in centimeters.
       * @example 15
       */
      length?: unknown;
      /**
       * @description Weight in kilograms.
       * @example 2
       */
      weight?: unknown;
      /** @example books */
      content?: unknown;
      /**
       * @description Parcel value in EUR.
       * @example 150
       */
      value?: unknown;
    };
    PackageResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      weight?: number | null;
      /** @example null */
      length?: number | null;
      /** @example null */
      width?: number | null;
      /** @example null */
      height?: number | null;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
    };
    PalletResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      weight?: number | null;
      /** @example null */
      length?: number | null;
      /** @example null */
      width?: number | null;
      /** @example null */
      height?: number | null;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
    };
    ParcelLevelOptionalServiceResponse: {
      id?: number;
      price?: components["schemas"]["PriceResponse"];
      applicableToParcelTypes?: string[];
    };
    ParcelResponse: {
      parcelId?: string;
    };
    ParcelTrackingResponse: {
      number?: string;
      url?: string;
      /** @example null */
      deliveryStatus?: string | null;
    };
    ParcelTransportTypePriceResponse: {
      code?: string;
      price?: components["schemas"]["PriceResponse"];
    };
    ParcelsRequest: {
      /**
       * @description `envelopes` is named 'Documents' on website. [More info](https://www.eurosender.com/en/s/services/envelope)
       * @default []
       */
      envelopes: unknown;
      packages?: components["schemas"]["PackageRequest"][];
      /** @default [] */
      pallets: unknown;
    };
    ParcelsResponse: {
      envelopes?: components["schemas"]["EnvelopeResponse"][];
      packages?: components["schemas"]["PackageResponse"][];
      pallets?: components["schemas"]["PalletResponse"][];
      vans?: components["schemas"]["VanResponse"][];
      trucks?: components["schemas"]["TruckResponse"][];
      nonStandard?: components["schemas"]["NonStandardResponse"][];
    };
    PaymentDiscountResponse: {
      rate?: string;
      discount?: components["schemas"]["PriceResponse"];
    };
    PaymentMethodResponse: {
      code?: string;
      paymentDiscount?: components["schemas"]["PaymentDiscountResponse"] | null;
    };
    PickupDateFeeResponse: {
      feeId?: number;
      price?: components["schemas"]["PriceResponse"];
    };
    PriceComponentsResponse: {
      /**
       * @default EUR
       * @example EUR
       */
      currencyCode: string;
      gross?: number;
      net?: number;
    };
    PriceResponse: {
      original?: components["schemas"]["PriceComponentsResponse"];
      converted?: components["schemas"]["PriceComponentsResponse"] | null;
    };
    ProformaContactPersonRequest: {
      contactPerson?: string;
      /** @example null */
      companyName?: string | null;
      phone?: string;
      email?: string;
      street?: string;
      zip?: string;
      city?: string;
      country?: string;
      /** @example null */
      vat?: string | null;
      /** @example null */
      eoriNumber?: string | null;
    };
    ProformaFileUploadRequest: {
      name?: string;
      mimetype?: string;
      content?: string;
    };
    "ProformaFileUploadRequest.FileUploadResponse": {
      /**
       * @description Id of uploaded document
       * @example 63e26b8ad79460c8dde7a8b745a19a201686296879.pdf
       */
      hashName?: unknown;
    };
    ProformaItemRequest: {
      description?: string;
      country?: string;
      quantity?: number;
      weight?: number;
      value?: number;
      /** @example null */
      hsCode?: string | null;
    };
    ProformaRequest: {
      shipper?: components["schemas"]["ProformaContactPersonRequest"];
      receiver?: components["schemas"]["ProformaContactPersonRequest"];
      /** @description Collection of uploaded commercial invoices */
      invoices?: unknown;
      items?: components["schemas"]["ProformaItemRequest"][];
      /**
       * @description Code of order for which Proforma invoice is submitted
       * @example 123456-78
       */
      orderCode?: unknown;
      /** @enum {string} */
      reason?: string;
      currency?: string;
    };
    QuoteOptionsResponse: {
      paymentMethods?: components["schemas"]["PaymentMethodResponse"][];
      parcelLevelOptionalServices?: components["schemas"]["ParcelLevelOptionalServiceResponse"][];
      parcelTransportTypePrices?: components["schemas"]["ParcelTransportTypePriceResponse"][];
      serviceTypes?: components["schemas"]["ServiceTypeResponse"][];
      /** @example null */
      generalTermsAndConditionsLink?: string | null;
    };
    QuoteOrderResponse: {
      totalPrice?: components["schemas"]["PriceResponse"];
      /** @example null */
      insuranceId?: number | null;
      parcels?: components["schemas"]["ParcelResponse"][];
      paymentDiscount?: components["schemas"]["PaymentDiscountResponse"] | null;
      addOns?: string[];
      serviceType?: string;
      /** Format: date-time */
      minPickupDate?: string;
      estimatedDeliveryTime?: string;
      /** @example null */
      courierId?: number | null;
      /** @example null */
      courierTag?: string | null;
    };
    QuoteRequest: {
      /** @description Shipment details (where and when to ship) */
      shipment: components["schemas"]["ShipmentRequest"];
      /** @description Parcels details (what to ship) */
      parcels: components["schemas"]["ParcelsRequest"];
      /**
       * @description Payment method, where `credit` is for User credits (pre-paid, Wallet)
       *     and `deferred` must be additionally approved to be enabled for use. Other payment methods are not
       *     supported.
       * @example credit
       * @enum {string}
       */
      paymentMethod: "credit" | "deferred";
      /**
       * @description Only `EUR` supported.
       * @example EUR
       * @enum {string}
       */
      currencyCode: "EUR";
      /**
       * @description Service type to use. [More on service types](#section/Service-types)
       * @example selection
       * @enum {string}
       */
      serviceType?:
      | "selection"
      | "flexi"
      | "regular_plus"
      | "express"
      | "freight";
      /**
       * @description For internal use only.
       * @example null
       */
      courierTag?: string | null;
      /**
       * @description For internal use only
       * @default false
       */
      preferredCouriersOnly: boolean;
      /**
       * @description Explicit courier to use, for internal use only.
       * @example null
       */
      courierId?: number | null;
      /**
       * @description Additional insurance ID, applicable for selected service type, one of the values from Quote
       *     response under `options.serviceTypes[].insurances[]`
       * @example null
       */
      insuranceId?: number | null;
      /**
       * @description Format in which labels will be created. Defaults to `pdf`. `zpl` format is not available for all couriers.
       * @default null
       * @example null
       * @enum {string|null}
       */
      labelFormat: "pdf" | "zpl" | null;
    };
    "QuoteRequest.QuoteResponse": {
      options?: components["schemas"]["QuoteOptionsResponse"];
      order?: components["schemas"]["QuoteOrderResponse"] | null;
      warnings?: components["schemas"]["QuoteWarningResponse"][];
    };
    QuoteWarningResponse: {
      code?: string;
      message?: string;
      /** @example null */
      parameterPath?: string | null;
    };
    "RegionRequest.RegionResponse": {
      /**
       * @description regionId to be used in other endpoints
       * @example 6
       */
      id?: unknown;
      /** @example County Dublin */
      name?: unknown;
      /**
       * @description regionCode to be used in other endpoints. This field is available only for some countries
       *     (Italy, USA, Canada). Example value: `AC` for region `Ancona` in Italy
       * @example null
       */
      code?: unknown;
    };
    ServiceTypeResponse: {
      name?: string;
      /** Format: date-time */
      minPickupDate?: string;
      isCallRequired?: boolean;
      isLabelRequired?: boolean;
      edt?: string;
      price?: components["schemas"]["PriceResponse"] | null;
      pickupDateFee?: components["schemas"]["PickupDateFeeResponse"] | null;
      insurances?: components["schemas"]["InsuranceResponse"][];
      pickupExcludedDates?: string[];
      addOns?: components["schemas"]["AddOnResponse"][];
      /** @example null */
      courierTermsAndConditionsLink?: string | null;
    };
    ShipmentAddressRequest: {
      /**
       * @description Country code in ISO 3166-1 alpha-2
       * @example LU
       */
      country: unknown;
      /**
       * @description ZIP code
       * @example 1911
       */
      zip?: unknown;
      /**
       * @description City name, belonging to ZIP code. For cases where providing exact city name is mandatory
       *     (like Ireland or Romania), it can be retrieved from endpoint
       *     `/v1/countries/{countryCode}/cities`. This condition depends on Country, flag for this is
       *     available at endpoint `/v1/countries`.
       *     If `cityId` is provided, this field can be empty.
       * @example Luxembourg
       */
      city?: unknown;
      /**
       * @description ID of the City for cases where providing exact city is mandatory (like Ireland or Romania), it can
       *     be retrieved from endpoint `/v1/countries/{countryCode}/cities`. This condition depends on Country, flag
       *     for this is available at endpoint `/v1/countries`. If exact city name is provided in field `city`, this
       *     field can be empty.
       *     Example value: `1341` for `Dublin` in region `County Dublin` in Ireland
       * @default null
       */
      cityId: unknown;
      /**
       * @description Street name with house number
       * @example 9 Rue du Laboratoire
       */
      street?: string | null;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      additionalInfo: unknown;
      /**
       * @description Region name. For cases where providing region (name, code or ID) is mandatory,
       *     like Ireland, Romania, Italy, USA, Canada,
       *     it can be retrieved from endpoint `/v1/countries/{countryCode}/regions`.
       *     This condition depends on Country, flag for this is available at endpoint `/v1/countries`.
       *     If `regionCode` or `regionId` is provided, this field can be empty.
       *     Example value: `County Dublin` in Ireland
       * @default null
       */
      region: unknown;
      /**
       * @description Region code. For cases where providing region (name, code or ID) is mandatory,
       *     like Ireland, Romania, Italy, USA, Canada,
       *     it can be retrieved from endpoint `/v1/countries/{countryCode}/regions`.
       *     This condition depends on Country, flag for this is available at endpoint `/v1/countries`.
       *     If `region` or `regionId` is provided, this field can be empty.
       *     This field is supported only for some countries (Italy, USA, Canada).
       *     Example value: `AC` for region `Ancona` in Italy
       * @default null
       */
      regionCode: unknown;
      /**
       * @description Region ID. For cases where providing region (name, code or ID) is mandatory,
       *     like Ireland, Romania, Italy, USA, Canada,
       *     it can be retrieved from endpoint `/v1/countries/{countryCode}/regions`.
       *     This condition depends on Country, flag for this is available at endpoint `/v1/countries`.
       *     If `region` or `regionCode` is provided, this field can be empty.
       *     Example value: `6` for region `County Dublin` in Ireland
       * @default null
       */
      regionId: unknown;
      /**
       * @deprecated
       * @description Not used.
       * @default null
       */
      timeZoneName: unknown;
      /**
       * @description Additional address fields that can be provided for some countries, like
       *     `doorbell` for Germany. Availability of the fields and flag
       *     if optional or required can be retrieved from endpoint `/v1/countries`.
       * @default []
       */
      customFields: unknown;
    };
    ShipmentAddressResponse: {
      street?: string;
      zip?: string;
      city?: string;
      region?: components["schemas"]["OrderRegionResponse"] | null;
      country?: string;
    };
    ShipmentContactRequest: {
      /**
       * @description Person or company name in a role of pickup/delivery contact
       * @example Eurosender SARL
       */
      name?: unknown;
      /**
       * Format: email
       * @description Email address that can be used by courier for communication regarding pickup/delivery
       * @example name@example.com
       */
      email?: unknown;
      /**
       * @description Phone number in international format (E.164) that can be used by courier for communication
       *     regarding pickup/delivery
       * @example +442031292884
       */
      phone?: unknown;
    };
    ShipmentContactResponse: {
      name?: string;
      phone?: string;
    };
    ShipmentRequest: {
      pickupAddress: components["schemas"]["ShipmentAddressRequest"];
      deliveryAddress: components["schemas"]["ShipmentAddressRequest"];
      /**
       * Format: date-time
       * @description Pickup date, can be empty to retrieve first possible date (`minPickupDate`).
       *     Time part is ignored.
       *     Value must be in RFC3339 format (for example `2023-04-04T00:00:00Z`)
       * @default 2023-04-04T00:00:00Z
       */
      pickupDate: string;
      /** @description Pickup contact, not needed for `Quote`, but required for `Order`. */
      pickupContact?: components["schemas"]["ShipmentContactRequest"] | null;
      /** @description Delivery contact, not needed for `Quote`, but required for `Order`. */
      deliveryContact?: components["schemas"]["ShipmentContactRequest"] | null;
      /**
       * @description Extra addons that can be selected/activated if supported (returned by `Quote`)
       * @default []
       * @enum {unknown}
       */
      addOns: "flexibleChanges";
    };
    ShipmentResponse: {
      pickupAddress?: components["schemas"]["ShipmentAddressResponse"];
      pickupContact?: components["schemas"]["ShipmentContactResponse"];
      deliveryAddress?: components["schemas"]["ShipmentAddressResponse"];
      deliveryContact?: components["schemas"]["ShipmentContactResponse"];
      /** Format: date-time */
      pickupDate?: string;
      addOns?: components["schemas"]["AddOnResponse"][];
      routeDistance?: number | null;
    };
    TrackingDetailsCheckpoint: {
      /** Format: date-time */
      eventDate?: string;
      /** @enum {string} */
      status?:
      | "InfoReceived"
      | "InTransit"
      | "OutForDelivery"
      | "AttemptFail"
      | "Delivered"
      | "AvailableForPickup"
      | "Exception"
      | "Expired"
      | "Pending";
      substatus?: string;
      /** @example null */
      location?: string | null;
      /** @example null */
      countryCode?: string | null;
      /** @example null */
      message?: string | null;
    };
    TrackingDetailsParcel: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      trackingNumber?: string;
      /** @enum {string} */
      currentStatus?:
      | "InfoReceived"
      | "InTransit"
      | "OutForDelivery"
      | "AttemptFail"
      | "Delivered"
      | "AvailableForPickup"
      | "Exception"
      | "Expired"
      | "Pending";
      currentSubstatus?: string;
      /** Format: date-time */
      updatedDate?: string;
      /**
       * Format: date-time
       * @example null
       */
      expectedDeliveryDate?: string | null;
      /**
       * Format: date-time
       * @example null
       */
      pickupDate?: string | null;
      /**
       * Format: date-time
       * @example null
       */
      deliveryDate?: string | null;
      /** @example null */
      signedBy?: string | null;
      checkpoints?: components["schemas"]["TrackingDetailsCheckpoint"][];
    };
    TrackingDetailsResponse: {
      parcels?: components["schemas"]["TrackingDetailsParcel"][];
    };
    TruckOptionsResponse: {
      ltl?: string;
      ftl?: string;
      ldm?: number;
    };
    TruckResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      weight?: number | null;
      cargoPackagingType?: string;
      /** @example null */
      euroPalletQuantity?: number | null;
      loadingMeters?: number | null;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      truckOptions?: components["schemas"]["TruckOptionsResponse"] | null;
      optionalServices?: components["schemas"]["OptionalServiceResponse"][];
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
      cargoDescription?: string;
    };
    VanResponse: {
      /** @example null */
      parcelId?: string | null;
      orderCode?: string;
      type?: string;
      /** @example null */
      content?: string | null;
      /** @example null */
      value?: number | null;
      optionalServices?: components["schemas"]["OptionalServiceResponse"][];
      price?: components["schemas"]["PriceResponse"];
      tracking?: components["schemas"]["ParcelTrackingResponse"] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  api_v1countries_get_collection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description CountryResponse collection */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CountryResponse"][];
        };
      };
    };
  };
  api_v1countries_countryCodecities_get_collection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Two letter country code
         * @example IE
         */
        countryCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description CityRequest collection */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CityRequest.CityResponse"][];
        };
      };
    };
  };
  api_v1countries_countryCoderegions_get_collection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Two letter country code
         * @example IE
         */
        countryCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description RegionRequest collection */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RegionRequest.RegionResponse"][];
        };
      };
    };
  };
  api_v1orders_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The new OrderRequest resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OrderRequest resource created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrderRequest.OrderResponse"];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1ordersvalidate_creation_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The new OrderRequest resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OrderRequest resource created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1orders_orderCode_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OrderRequest identifier */
        orderCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OrderRequest resource */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrderRequest.OrderResponse"];
        };
      };
      /** @description Resource not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1orders_orderCodedocuments_id_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Order code of existing order
         * @example 123456-78
         */
        orderCode: string;
        /**
         * @description ID of document (as returned by GET /v1/orders{orderCode} endpoint)
         * @example invoice_INV-12-345678
         */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OrderDocumentRequest resource */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/pdf": unknown;
          "x-application/zpl": unknown;
        };
      };
      /** @description Resource not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1orders_orderCodelabels_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Order code of existing order
         * @example 123456-78
         */
        orderCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OrderLabelRequest resource */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/pdf": unknown;
          "x-application/zpl": unknown;
        };
      };
      /** @description Resource not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1orders_orderCodetracking_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Order code of existing order
         * @example 123456-78
         */
        orderCode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description TrackingDetailsResponse resource */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrackingDetailsResponse"];
        };
      };
      /** @description Resource not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1proforma_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The new ProformaRequest resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProformaRequest"];
      };
    };
    responses: {
      /** @description ProformaRequest resource created */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1proformaupload_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The new ProformaFileUploadRequest resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProformaFileUploadRequest"];
      };
    };
    responses: {
      /** @description ProformaFileUploadRequest resource created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProformaFileUploadRequest.FileUploadResponse"];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_v1quotes_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The new QuoteRequest resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuoteRequest"];
      };
    };
    responses: {
      /** @description QuoteRequest resource created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuoteRequest.QuoteResponse"];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
